/*
 * Copyright (C) 2016/2021 Litote
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.litote.kmongo

import com.mongodb.MongoClientSettings
import org.bson.BsonBinaryReader
import org.bson.Document
import org.bson.codecs.DecoderContext
import org.bson.codecs.configuration.CodecRegistry
import org.bson.types.ObjectId
import org.litote.kmongo.service.ClassMappingType
import java.nio.ByteBuffer

/**
 *
 */
object KMongoBenchmark {

    fun parseFriends(dbo: Document): Friend {
        val coord = dbo["coordinate"] as Document
        val coordinate = Coordinate(coord["lat"] as Int, coord["lng"] as Int)
        return Friend(
            dbo["_id"] as ObjectId?,
            dbo["name"] as String,
            dbo["address"] as String,
            coordinate
        )
    }

    fun parseFriendWithBuddies(dbo: Document): FriendWithBuddies {
        val coord = dbo["coordinate"] as Document
        val coordinate = Coordinate(coord["lat"] as Int, coord["lng"] as Int)
        return FriendWithBuddies(
            dbo["_id"] as ObjectId?,
            dbo["name"] as String,
            dbo["address"] as String,
            coordinate,
            null,
            (dbo["buddies"] as? List<Document>)?.map { parseFriendWithBuddies(it) } ?: emptyList()
        )
    }

    val defaultCodecRegistry = MongoClientSettings.getDefaultCodecRegistry()
    val kmongoCodecRegistry = ClassMappingType.codecRegistry(MongoClientSettings.getDefaultCodecRegistry())

    inline fun <reified T : Any> decode(registry: CodecRegistry): T =
        registry
            .get<T>(T::class.java)
            .decode(
                BsonBinaryReader(
                    ByteBuffer.wrap(FRIEND_AS_BYTE)
                ),
                DecoderContext.builder().build()
            )

    val FRIEND_AS_BYTE = byteArrayOf(
        -75,
        1,
        0,
        0,
        7,
        95,
        105,
        100,
        0,
        80,
        116,
        -128,
        -1,
        48,
        4,
        -104,
        62,
        31,
        -27,
        -19,
        85,
        2,
        110,
        97,
        109,
        101,
        0,
        6,
        0,
        0,
        0,
        74,
        111,
        104,
        110,
        48,
        0,
        2,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        0,
        9,
        0,
        0,
        0,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        48,
        0,
        3,
        99,
        111,
        111,
        114,
        100,
        105,
        110,
        97,
        116,
        101,
        0,
        23,
        0,
        0,
        0,
        16,
        108,
        97,
        116,
        0,
        1,
        0,
        0,
        0,
        16,
        108,
        110,
        103,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        98,
        117,
        100,
        100,
        105,
        101,
        115,
        0,
        77,
        1,
        0,
        0,
        3,
        48,
        0,
        79,
        0,
        0,
        0,
        2,
        110,
        97,
        109,
        101,
        0,
        7,
        0,
        0,
        0,
        74,
        111,
        104,
        110,
        48,
        49,
        0,
        2,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        0,
        9,
        0,
        0,
        0,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        48,
        0,
        3,
        99,
        111,
        111,
        114,
        100,
        105,
        110,
        97,
        116,
        101,
        0,
        23,
        0,
        0,
        0,
        16,
        108,
        97,
        116,
        0,
        1,
        0,
        0,
        0,
        16,
        108,
        110,
        103,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        49,
        0,
        79,
        0,
        0,
        0,
        2,
        110,
        97,
        109,
        101,
        0,
        7,
        0,
        0,
        0,
        74,
        111,
        104,
        110,
        48,
        50,
        0,
        2,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        0,
        9,
        0,
        0,
        0,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        48,
        0,
        3,
        99,
        111,
        111,
        114,
        100,
        105,
        110,
        97,
        116,
        101,
        0,
        23,
        0,
        0,
        0,
        16,
        108,
        97,
        116,
        0,
        1,
        0,
        0,
        0,
        16,
        108,
        110,
        103,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        50,
        0,
        79,
        0,
        0,
        0,
        2,
        110,
        97,
        109,
        101,
        0,
        7,
        0,
        0,
        0,
        74,
        111,
        104,
        110,
        48,
        51,
        0,
        2,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        0,
        9,
        0,
        0,
        0,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        48,
        0,
        3,
        99,
        111,
        111,
        114,
        100,
        105,
        110,
        97,
        116,
        101,
        0,
        23,
        0,
        0,
        0,
        16,
        108,
        97,
        116,
        0,
        1,
        0,
        0,
        0,
        16,
        108,
        110,
        103,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        51,
        0,
        79,
        0,
        0,
        0,
        2,
        110,
        97,
        109,
        101,
        0,
        7,
        0,
        0,
        0,
        74,
        111,
        104,
        110,
        48,
        52,
        0,
        2,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        0,
        9,
        0,
        0,
        0,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        48,
        0,
        3,
        99,
        111,
        111,
        114,
        100,
        105,
        110,
        97,
        116,
        101,
        0,
        23,
        0,
        0,
        0,
        16,
        108,
        97,
        116,
        0,
        1,
        0,
        0,
        0,
        16,
        108,
        110,
        103,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    )

}